def PIPELINE_NAME = "frontend"

node {

  def config = load "../workspace@script/jenkins/${PIPELINE_NAME}/config.groovy"
  def utils = load "../workspace@script/jenkins/utils.groovy"

  stage('Checkout Source') {
    script {

      echo "Cleaning out working directory ..."
      deleteDir()

      echo "Checking out the main indy-catalyst credential-registry client code ..."
      utils.sparseCheckout("${config.SOURCE_REPO}", 
                           "${config.SOURCE_REPO_BRANCH}",
                           "${config.SOURCE_REPO_WORKING_DIRECTORY}", 
                           "${config.SOURCE_REPO_CONTEXT_DIRECTORY}")

      if (config.THEME_REPO) {
        echo "Checking out custom theme source code ..."
        utils.sparseCheckout("${config.THEME_REPO}", 
                             "${config.THEME_REPO_BRANCH}",
                             "${config.THEME_REPO_WORKING_DIRECTORY}", 
                             "${config.THEME_REPO_CONTEXT_DIRECTORY}")

        echo "Copying the custom themes into the theme directory ..."
        sh (
          returnStdout: true,
          script: "cp -r ${config.THEME_REPO_WORKING_DIRECTORY}/${config.THEME_REPO_CONTEXT_DIRECTORY}* ${config.SOURCE_REPO_WORKING_DIRECTORY}/${config.SOURCE_REPO_THEME_DIRECTORY}"
        )
      }
    }
  }

  stage("Build ${config.ARTIFACTS_NAME} ...") {
    script {
      openshift.withCluster() {
        openshift.withProject() {
          echo "Building the application artifacts ..."
          utils.build("${config.ARTIFACTS_NAME}",
                      config.WAIT_TIMEOUT,
                      "${config.SOURCE_REPO_WORKING_DIRECTORY}",
                      "TOB_THEME=${config.TOB_THEME_NAME}")
        }
      }
    }
  }

  config.BUILDS.each {
    stage("Build ${it}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {
            echo "Building the ${it} image ..."
            utils.build("${it}", config.WAIT_TIMEOUT)
          }
        }
      }
    }
  }

  stage("Deploy ${config.DEPLOYMENT_ENVIRONMENT_TAGS[0]}") {
    script {
      utils.deploy("${config.APP_NAME}",
                  "${config.SUFFIX}",
                  "${config.NAME_SPACE}",
                  "${config.DEPLOYMENT_ENVIRONMENT_TAGS[0]}")
    }
  }
}